
BUTTON-TO-LED MAPPER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d38  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001ec0  08001ec0  00002ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ed8  08001ed8  00003018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001ed8  08001ed8  00002ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001ee0  08001ee0  00003018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ee0  08001ee0  00002ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ee4  08001ee4  00002ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08001ee8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003018  2**0
                  CONTENTS
 10 .bss          00000068  20000018  20000018  00003018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000080  20000080  00003018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008f49  00000000  00000000  00003048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000172a  00000000  00000000  0000bf91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000998  00000000  00000000  0000d6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000761  00000000  00000000  0000e058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd34  00000000  00000000  0000e7b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a911  00000000  00000000  0002e4ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4ed5  00000000  00000000  00038dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fdcd3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002790  00000000  00000000  000fdd18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  001004a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001ea8 	.word	0x08001ea8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08001ea8 	.word	0x08001ea8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <toggleGreen>:
	ButtonAction Action ;

}ButtonMap;

void toggleGreen(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80004f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004fc:	4802      	ldr	r0, [pc, #8]	@ (8000508 <toggleGreen+0x14>)
 80004fe:	f000 fd22 	bl	8000f46 <HAL_GPIO_TogglePin>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40020c00 	.word	0x40020c00

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fa40 	bl	8000994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f804 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f86c 	bl	80005f4 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	bf00      	nop
 800051e:	e7fd      	b.n	800051c <main+0x10>

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	@ 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	@ 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f001 fc8e 	bl	8001e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b28      	ldr	r3, [pc, #160]	@ (80005ec <SystemClock_Config+0xcc>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800054c:	4a27      	ldr	r2, [pc, #156]	@ (80005ec <SystemClock_Config+0xcc>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	@ 0x40
 8000554:	4b25      	ldr	r3, [pc, #148]	@ (80005ec <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b22      	ldr	r3, [pc, #136]	@ (80005f0 <SystemClock_Config+0xd0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a21      	ldr	r2, [pc, #132]	@ (80005f0 <SystemClock_Config+0xd0>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b1f      	ldr	r3, [pc, #124]	@ (80005f0 <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800057c:	2301      	movs	r3, #1
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000580:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000584:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800058e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000590:	2308      	movs	r3, #8
 8000592:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000594:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000598:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059e:	2307      	movs	r3, #7
 80005a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 fd00 	bl	8000fac <HAL_RCC_OscConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005b2:	f000 f8c7 	bl	8000744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	230f      	movs	r3, #15
 80005b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ba:	2302      	movs	r3, #2
 80005bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ce:	f107 030c 	add.w	r3, r7, #12
 80005d2:	2105      	movs	r1, #5
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 ff61 	bl	800149c <HAL_RCC_ClockConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005e0:	f000 f8b0 	bl	8000744 <Error_Handler>
  }
}
 80005e4:	bf00      	nop
 80005e6:	3750      	adds	r7, #80	@ 0x50
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	4b2b      	ldr	r3, [pc, #172]	@ (80006bc <MX_GPIO_Init+0xc8>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a2a      	ldr	r2, [pc, #168]	@ (80006bc <MX_GPIO_Init+0xc8>)
 8000614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b28      	ldr	r3, [pc, #160]	@ (80006bc <MX_GPIO_Init+0xc8>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4b24      	ldr	r3, [pc, #144]	@ (80006bc <MX_GPIO_Init+0xc8>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a23      	ldr	r2, [pc, #140]	@ (80006bc <MX_GPIO_Init+0xc8>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b21      	ldr	r3, [pc, #132]	@ (80006bc <MX_GPIO_Init+0xc8>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	4b1d      	ldr	r3, [pc, #116]	@ (80006bc <MX_GPIO_Init+0xc8>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a1c      	ldr	r2, [pc, #112]	@ (80006bc <MX_GPIO_Init+0xc8>)
 800064c:	f043 0308 	orr.w	r3, r3, #8
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b1a      	ldr	r3, [pc, #104]	@ (80006bc <MX_GPIO_Init+0xc8>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0308 	and.w	r3, r3, #8
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000664:	4816      	ldr	r0, [pc, #88]	@ (80006c0 <MX_GPIO_Init+0xcc>)
 8000666:	f000 fc55 	bl	8000f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800066a:	2301      	movs	r3, #1
 800066c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	4619      	mov	r1, r3
 800067e:	4811      	ldr	r0, [pc, #68]	@ (80006c4 <MX_GPIO_Init+0xd0>)
 8000680:	f000 faac 	bl	8000bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000684:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000688:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	4619      	mov	r1, r3
 800069c:	4808      	ldr	r0, [pc, #32]	@ (80006c0 <MX_GPIO_Init+0xcc>)
 800069e:	f000 fa9d 	bl	8000bdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	2006      	movs	r0, #6
 80006a8:	f000 fa6e 	bl	8000b88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006ac:	2006      	movs	r0, #6
 80006ae:	f000 fa87 	bl	8000bc0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006b2:	bf00      	nop
 80006b4:	3720      	adds	r7, #32
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40020c00 	.word	0x40020c00
 80006c4:	40020000 	.word	0x40020000

080006c8 <HAL_GPIO_EXTI_Callback>:
//{
//	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
//}

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < NUM_BUTTON; i++)
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	e019      	b.n	800070c <HAL_GPIO_EXTI_Callback+0x44>
	    {
	        if(buttonMappings[i].GPIO_Pin == GPIO_Pin)
 80006d8:	4910      	ldr	r1, [pc, #64]	@ (800071c <HAL_GPIO_EXTI_Callback+0x54>)
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	4613      	mov	r3, r2
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	4413      	add	r3, r2
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	440b      	add	r3, r1
 80006e6:	3304      	adds	r3, #4
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	88fa      	ldrh	r2, [r7, #6]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d10a      	bne.n	8000706 <HAL_GPIO_EXTI_Callback+0x3e>
	        {
	            buttonMappings[i].Action();
 80006f0:	490a      	ldr	r1, [pc, #40]	@ (800071c <HAL_GPIO_EXTI_Callback+0x54>)
 80006f2:	68fa      	ldr	r2, [r7, #12]
 80006f4:	4613      	mov	r3, r2
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	4413      	add	r3, r2
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	440b      	add	r3, r1
 80006fe:	3308      	adds	r3, #8
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4798      	blx	r3
	            break;
 8000704:	e006      	b.n	8000714 <HAL_GPIO_EXTI_Callback+0x4c>
	for(int i = 0; i < NUM_BUTTON; i++)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	3301      	adds	r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	2b00      	cmp	r3, #0
 8000710:	dde2      	ble.n	80006d8 <HAL_GPIO_EXTI_Callback+0x10>

//	if(GPIO_Pin == GPIO_PIN_0)
//	  {
//	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
//	  }
}
 8000712:	bf00      	nop
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000000 	.word	0x20000000

08000720 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a04      	ldr	r2, [pc, #16]	@ (8000740 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d101      	bne.n	8000736 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000732:	f000 f951 	bl	80009d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40000c00 	.word	0x40000c00

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <Error_Handler+0x8>

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <HAL_MspInit+0x4c>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075e:	4a0f      	ldr	r2, [pc, #60]	@ (800079c <HAL_MspInit+0x4c>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000764:	6453      	str	r3, [r2, #68]	@ 0x44
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <HAL_MspInit+0x4c>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b09      	ldr	r3, [pc, #36]	@ (800079c <HAL_MspInit+0x4c>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077a:	4a08      	ldr	r2, [pc, #32]	@ (800079c <HAL_MspInit+0x4c>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000780:	6413      	str	r3, [r2, #64]	@ 0x40
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <HAL_MspInit+0x4c>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800078e:	2007      	movs	r0, #7
 8000790:	f000 f9ef 	bl	8000b72 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800

080007a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08e      	sub	sp, #56	@ 0x38
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	4b33      	ldr	r3, [pc, #204]	@ (8000884 <HAL_InitTick+0xe4>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b8:	4a32      	ldr	r2, [pc, #200]	@ (8000884 <HAL_InitTick+0xe4>)
 80007ba:	f043 0308 	orr.w	r3, r3, #8
 80007be:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c0:	4b30      	ldr	r3, [pc, #192]	@ (8000884 <HAL_InitTick+0xe4>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c4:	f003 0308 	and.w	r3, r3, #8
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007cc:	f107 0210 	add.w	r2, r7, #16
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4611      	mov	r1, r2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 f86c 	bl	80018b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007dc:	6a3b      	ldr	r3, [r7, #32]
 80007de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d103      	bne.n	80007ee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007e6:	f001 f851 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 80007ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80007ec:	e004      	b.n	80007f8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007ee:	f001 f84d 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 80007f2:	4603      	mov	r3, r0
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007fa:	4a23      	ldr	r2, [pc, #140]	@ (8000888 <HAL_InitTick+0xe8>)
 80007fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000800:	0c9b      	lsrs	r3, r3, #18
 8000802:	3b01      	subs	r3, #1
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000806:	4b21      	ldr	r3, [pc, #132]	@ (800088c <HAL_InitTick+0xec>)
 8000808:	4a21      	ldr	r2, [pc, #132]	@ (8000890 <HAL_InitTick+0xf0>)
 800080a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800080c:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <HAL_InitTick+0xec>)
 800080e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000812:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000814:	4a1d      	ldr	r2, [pc, #116]	@ (800088c <HAL_InitTick+0xec>)
 8000816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000818:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800081a:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <HAL_InitTick+0xec>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000820:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <HAL_InitTick+0xec>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000826:	4b19      	ldr	r3, [pc, #100]	@ (800088c <HAL_InitTick+0xec>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 800082c:	4817      	ldr	r0, [pc, #92]	@ (800088c <HAL_InitTick+0xec>)
 800082e:	f001 f873 	bl	8001918 <HAL_TIM_Base_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000838:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800083c:	2b00      	cmp	r3, #0
 800083e:	d11b      	bne.n	8000878 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000840:	4812      	ldr	r0, [pc, #72]	@ (800088c <HAL_InitTick+0xec>)
 8000842:	f001 f8c3 	bl	80019cc <HAL_TIM_Base_Start_IT>
 8000846:	4603      	mov	r3, r0
 8000848:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800084c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000850:	2b00      	cmp	r3, #0
 8000852:	d111      	bne.n	8000878 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000854:	2032      	movs	r0, #50	@ 0x32
 8000856:	f000 f9b3 	bl	8000bc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b0f      	cmp	r3, #15
 800085e:	d808      	bhi.n	8000872 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000860:	2200      	movs	r2, #0
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	2032      	movs	r0, #50	@ 0x32
 8000866:	f000 f98f 	bl	8000b88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800086a:	4a0a      	ldr	r2, [pc, #40]	@ (8000894 <HAL_InitTick+0xf4>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	e002      	b.n	8000878 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000878:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800087c:	4618      	mov	r0, r3
 800087e:	3738      	adds	r7, #56	@ 0x38
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	431bde83 	.word	0x431bde83
 800088c:	20000034 	.word	0x20000034
 8000890:	40000c00 	.word	0x40000c00
 8000894:	20000010 	.word	0x20000010

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <NMI_Handler+0x4>

080008a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <HardFault_Handler+0x4>

080008a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <MemManage_Handler+0x4>

080008b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <UsageFault_Handler+0x4>

080008c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80008fc:	2001      	movs	r0, #1
 80008fe:	f000 fb3d 	bl	8000f7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800090c:	4802      	ldr	r0, [pc, #8]	@ (8000918 <TIM5_IRQHandler+0x10>)
 800090e:	f001 f8cd 	bl	8001aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000034 	.word	0x20000034

0800091c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <SystemInit+0x20>)
 8000922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000926:	4a05      	ldr	r2, [pc, #20]	@ (800093c <SystemInit+0x20>)
 8000928:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800092c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000940:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000978 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000944:	f7ff ffea 	bl	800091c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000948:	480c      	ldr	r0, [pc, #48]	@ (800097c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800094a:	490d      	ldr	r1, [pc, #52]	@ (8000980 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800094c:	4a0d      	ldr	r2, [pc, #52]	@ (8000984 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000950:	e002      	b.n	8000958 <LoopCopyDataInit>

08000952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000956:	3304      	adds	r3, #4

08000958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800095c:	d3f9      	bcc.n	8000952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095e:	4a0a      	ldr	r2, [pc, #40]	@ (8000988 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000960:	4c0a      	ldr	r4, [pc, #40]	@ (800098c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000964:	e001      	b.n	800096a <LoopFillZerobss>

08000966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000968:	3204      	adds	r2, #4

0800096a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800096c:	d3fb      	bcc.n	8000966 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800096e:	f001 fa77 	bl	8001e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000972:	f7ff fdcb 	bl	800050c <main>
  bx  lr    
 8000976:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000978:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800097c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000980:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000984:	08001ee8 	.word	0x08001ee8
  ldr r2, =_sbss
 8000988:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800098c:	20000080 	.word	0x20000080

08000990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC_IRQHandler>
	...

08000994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000998:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <HAL_Init+0x40>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a0d      	ldr	r2, [pc, #52]	@ (80009d4 <HAL_Init+0x40>)
 800099e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009a4:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <HAL_Init+0x40>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a0a      	ldr	r2, [pc, #40]	@ (80009d4 <HAL_Init+0x40>)
 80009aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b0:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <HAL_Init+0x40>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a07      	ldr	r2, [pc, #28]	@ (80009d4 <HAL_Init+0x40>)
 80009b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009bc:	2003      	movs	r0, #3
 80009be:	f000 f8d8 	bl	8000b72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009c2:	2000      	movs	r0, #0
 80009c4:	f7ff feec 	bl	80007a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c8:	f7ff fec2 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023c00 	.word	0x40023c00

080009d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <HAL_IncTick+0x20>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <HAL_IncTick+0x24>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4413      	add	r3, r2
 80009e8:	4a04      	ldr	r2, [pc, #16]	@ (80009fc <HAL_IncTick+0x24>)
 80009ea:	6013      	str	r3, [r2, #0]
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000014 	.word	0x20000014
 80009fc:	2000007c 	.word	0x2000007c

08000a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return uwTick;
 8000a04:	4b03      	ldr	r3, [pc, #12]	@ (8000a14 <HAL_GetTick+0x14>)
 8000a06:	681b      	ldr	r3, [r3, #0]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	2000007c 	.word	0x2000007c

08000a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a28:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a34:	4013      	ands	r3, r2
 8000a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4a:	4a04      	ldr	r2, [pc, #16]	@ (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	60d3      	str	r3, [r2, #12]
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a64:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <__NVIC_GetPriorityGrouping+0x18>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	f003 0307 	and.w	r3, r3, #7
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	db0b      	blt.n	8000aa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	f003 021f 	and.w	r2, r3, #31
 8000a94:	4907      	ldr	r1, [pc, #28]	@ (8000ab4 <__NVIC_EnableIRQ+0x38>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	095b      	lsrs	r3, r3, #5
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000e100 	.word	0xe000e100

08000ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	db0a      	blt.n	8000ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	490c      	ldr	r1, [pc, #48]	@ (8000b04 <__NVIC_SetPriority+0x4c>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	0112      	lsls	r2, r2, #4
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	440b      	add	r3, r1
 8000adc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae0:	e00a      	b.n	8000af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4908      	ldr	r1, [pc, #32]	@ (8000b08 <__NVIC_SetPriority+0x50>)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	3b04      	subs	r3, #4
 8000af0:	0112      	lsls	r2, r2, #4
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	440b      	add	r3, r1
 8000af6:	761a      	strb	r2, [r3, #24]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000e100 	.word	0xe000e100
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	@ 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	f1c3 0307 	rsb	r3, r3, #7
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	bf28      	it	cs
 8000b2a:	2304      	movcs	r3, #4
 8000b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3304      	adds	r3, #4
 8000b32:	2b06      	cmp	r3, #6
 8000b34:	d902      	bls.n	8000b3c <NVIC_EncodePriority+0x30>
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3b03      	subs	r3, #3
 8000b3a:	e000      	b.n	8000b3e <NVIC_EncodePriority+0x32>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	f04f 32ff 	mov.w	r2, #4294967295
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	401a      	ands	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b54:	f04f 31ff 	mov.w	r1, #4294967295
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5e:	43d9      	mvns	r1, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	4313      	orrs	r3, r2
         );
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3724      	adds	r7, #36	@ 0x24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff ff4c 	bl	8000a18 <__NVIC_SetPriorityGrouping>
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
 8000b94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b9a:	f7ff ff61 	bl	8000a60 <__NVIC_GetPriorityGrouping>
 8000b9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	68b9      	ldr	r1, [r7, #8]
 8000ba4:	6978      	ldr	r0, [r7, #20]
 8000ba6:	f7ff ffb1 	bl	8000b0c <NVIC_EncodePriority>
 8000baa:	4602      	mov	r2, r0
 8000bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff ff80 	bl	8000ab8 <__NVIC_SetPriority>
}
 8000bb8:	bf00      	nop
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ff54 	bl	8000a7c <__NVIC_EnableIRQ>
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b089      	sub	sp, #36	@ 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
 8000bf6:	e16b      	b.n	8000ed0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	f040 815a 	bne.w	8000eca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 0303 	and.w	r3, r3, #3
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d005      	beq.n	8000c2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d130      	bne.n	8000c90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	2203      	movs	r2, #3
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	4013      	ands	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	68da      	ldr	r2, [r3, #12]
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c64:	2201      	movs	r2, #1
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	4013      	ands	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	091b      	lsrs	r3, r3, #4
 8000c7a:	f003 0201 	and.w	r2, r3, #1
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0303 	and.w	r3, r3, #3
 8000c98:	2b03      	cmp	r3, #3
 8000c9a:	d017      	beq.n	8000ccc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	689a      	ldr	r2, [r3, #8]
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d123      	bne.n	8000d20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	08da      	lsrs	r2, r3, #3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3208      	adds	r2, #8
 8000ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	f003 0307 	and.w	r3, r3, #7
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	220f      	movs	r2, #15
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	691a      	ldr	r2, [r3, #16]
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	08da      	lsrs	r2, r3, #3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3208      	adds	r2, #8
 8000d1a:	69b9      	ldr	r1, [r7, #24]
 8000d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0203 	and.w	r2, r3, #3
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	f000 80b4 	beq.w	8000eca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b60      	ldr	r3, [pc, #384]	@ (8000ee8 <HAL_GPIO_Init+0x30c>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6a:	4a5f      	ldr	r2, [pc, #380]	@ (8000ee8 <HAL_GPIO_Init+0x30c>)
 8000d6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d72:	4b5d      	ldr	r3, [pc, #372]	@ (8000ee8 <HAL_GPIO_Init+0x30c>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d7e:	4a5b      	ldr	r2, [pc, #364]	@ (8000eec <HAL_GPIO_Init+0x310>)
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	089b      	lsrs	r3, r3, #2
 8000d84:	3302      	adds	r3, #2
 8000d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	220f      	movs	r2, #15
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a52      	ldr	r2, [pc, #328]	@ (8000ef0 <HAL_GPIO_Init+0x314>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d02b      	beq.n	8000e02 <HAL_GPIO_Init+0x226>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a51      	ldr	r2, [pc, #324]	@ (8000ef4 <HAL_GPIO_Init+0x318>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d025      	beq.n	8000dfe <HAL_GPIO_Init+0x222>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a50      	ldr	r2, [pc, #320]	@ (8000ef8 <HAL_GPIO_Init+0x31c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d01f      	beq.n	8000dfa <HAL_GPIO_Init+0x21e>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a4f      	ldr	r2, [pc, #316]	@ (8000efc <HAL_GPIO_Init+0x320>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d019      	beq.n	8000df6 <HAL_GPIO_Init+0x21a>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a4e      	ldr	r2, [pc, #312]	@ (8000f00 <HAL_GPIO_Init+0x324>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d013      	beq.n	8000df2 <HAL_GPIO_Init+0x216>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a4d      	ldr	r2, [pc, #308]	@ (8000f04 <HAL_GPIO_Init+0x328>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d00d      	beq.n	8000dee <HAL_GPIO_Init+0x212>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a4c      	ldr	r2, [pc, #304]	@ (8000f08 <HAL_GPIO_Init+0x32c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d007      	beq.n	8000dea <HAL_GPIO_Init+0x20e>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a4b      	ldr	r2, [pc, #300]	@ (8000f0c <HAL_GPIO_Init+0x330>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d101      	bne.n	8000de6 <HAL_GPIO_Init+0x20a>
 8000de2:	2307      	movs	r3, #7
 8000de4:	e00e      	b.n	8000e04 <HAL_GPIO_Init+0x228>
 8000de6:	2308      	movs	r3, #8
 8000de8:	e00c      	b.n	8000e04 <HAL_GPIO_Init+0x228>
 8000dea:	2306      	movs	r3, #6
 8000dec:	e00a      	b.n	8000e04 <HAL_GPIO_Init+0x228>
 8000dee:	2305      	movs	r3, #5
 8000df0:	e008      	b.n	8000e04 <HAL_GPIO_Init+0x228>
 8000df2:	2304      	movs	r3, #4
 8000df4:	e006      	b.n	8000e04 <HAL_GPIO_Init+0x228>
 8000df6:	2303      	movs	r3, #3
 8000df8:	e004      	b.n	8000e04 <HAL_GPIO_Init+0x228>
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	e002      	b.n	8000e04 <HAL_GPIO_Init+0x228>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e000      	b.n	8000e04 <HAL_GPIO_Init+0x228>
 8000e02:	2300      	movs	r3, #0
 8000e04:	69fa      	ldr	r2, [r7, #28]
 8000e06:	f002 0203 	and.w	r2, r2, #3
 8000e0a:	0092      	lsls	r2, r2, #2
 8000e0c:	4093      	lsls	r3, r2
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e14:	4935      	ldr	r1, [pc, #212]	@ (8000eec <HAL_GPIO_Init+0x310>)
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e22:	4b3b      	ldr	r3, [pc, #236]	@ (8000f10 <HAL_GPIO_Init+0x334>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e46:	4a32      	ldr	r2, [pc, #200]	@ (8000f10 <HAL_GPIO_Init+0x334>)
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e4c:	4b30      	ldr	r3, [pc, #192]	@ (8000f10 <HAL_GPIO_Init+0x334>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e70:	4a27      	ldr	r2, [pc, #156]	@ (8000f10 <HAL_GPIO_Init+0x334>)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e76:	4b26      	ldr	r3, [pc, #152]	@ (8000f10 <HAL_GPIO_Init+0x334>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8000f10 <HAL_GPIO_Init+0x334>)
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f10 <HAL_GPIO_Init+0x334>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ec4:	4a12      	ldr	r2, [pc, #72]	@ (8000f10 <HAL_GPIO_Init+0x334>)
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	61fb      	str	r3, [r7, #28]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	2b0f      	cmp	r3, #15
 8000ed4:	f67f ae90 	bls.w	8000bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	3724      	adds	r7, #36	@ 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40013800 	.word	0x40013800
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	40020400 	.word	0x40020400
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	40020c00 	.word	0x40020c00
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40021400 	.word	0x40021400
 8000f08:	40021800 	.word	0x40021800
 8000f0c:	40021c00 	.word	0x40021c00
 8000f10:	40013c00 	.word	0x40013c00

08000f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
 8000f20:	4613      	mov	r3, r2
 8000f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f24:	787b      	ldrb	r3, [r7, #1]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f2a:	887a      	ldrh	r2, [r7, #2]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f30:	e003      	b.n	8000f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f32:	887b      	ldrh	r3, [r7, #2]
 8000f34:	041a      	lsls	r2, r3, #16
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	619a      	str	r2, [r3, #24]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b085      	sub	sp, #20
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f58:	887a      	ldrh	r2, [r7, #2]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	041a      	lsls	r2, r3, #16
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	887b      	ldrh	r3, [r7, #2]
 8000f66:	400b      	ands	r3, r1
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	619a      	str	r2, [r3, #24]
}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f86:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f88:	695a      	ldr	r2, [r3, #20]
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d006      	beq.n	8000fa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f92:	4a05      	ldr	r2, [pc, #20]	@ (8000fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f98:	88fb      	ldrh	r3, [r7, #6]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fb94 	bl	80006c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40013c00 	.word	0x40013c00

08000fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e267      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d075      	beq.n	80010b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000fca:	4b88      	ldr	r3, [pc, #544]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 030c 	and.w	r3, r3, #12
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	d00c      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fd6:	4b85      	ldr	r3, [pc, #532]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000fde:	2b08      	cmp	r3, #8
 8000fe0:	d112      	bne.n	8001008 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fe2:	4b82      	ldr	r3, [pc, #520]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000fee:	d10b      	bne.n	8001008 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff0:	4b7e      	ldr	r3, [pc, #504]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d05b      	beq.n	80010b4 <HAL_RCC_OscConfig+0x108>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d157      	bne.n	80010b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e242      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001010:	d106      	bne.n	8001020 <HAL_RCC_OscConfig+0x74>
 8001012:	4b76      	ldr	r3, [pc, #472]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a75      	ldr	r2, [pc, #468]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 8001018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	e01d      	b.n	800105c <HAL_RCC_OscConfig+0xb0>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001028:	d10c      	bne.n	8001044 <HAL_RCC_OscConfig+0x98>
 800102a:	4b70      	ldr	r3, [pc, #448]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a6f      	ldr	r2, [pc, #444]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 8001030:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	4b6d      	ldr	r3, [pc, #436]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a6c      	ldr	r2, [pc, #432]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 800103c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	e00b      	b.n	800105c <HAL_RCC_OscConfig+0xb0>
 8001044:	4b69      	ldr	r3, [pc, #420]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a68      	ldr	r2, [pc, #416]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 800104a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	4b66      	ldr	r3, [pc, #408]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a65      	ldr	r2, [pc, #404]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 8001056:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800105a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d013      	beq.n	800108c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fccc 	bl	8000a00 <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800106c:	f7ff fcc8 	bl	8000a00 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b64      	cmp	r3, #100	@ 0x64
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e207      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107e:	4b5b      	ldr	r3, [pc, #364]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f0      	beq.n	800106c <HAL_RCC_OscConfig+0xc0>
 800108a:	e014      	b.n	80010b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108c:	f7ff fcb8 	bl	8000a00 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001094:	f7ff fcb4 	bl	8000a00 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b64      	cmp	r3, #100	@ 0x64
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e1f3      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a6:	4b51      	ldr	r3, [pc, #324]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f0      	bne.n	8001094 <HAL_RCC_OscConfig+0xe8>
 80010b2:	e000      	b.n	80010b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d063      	beq.n	800118a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010c2:	4b4a      	ldr	r3, [pc, #296]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 030c 	and.w	r3, r3, #12
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00b      	beq.n	80010e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010ce:	4b47      	ldr	r3, [pc, #284]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d11c      	bne.n	8001114 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010da:	4b44      	ldr	r3, [pc, #272]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d116      	bne.n	8001114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e6:	4b41      	ldr	r3, [pc, #260]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d005      	beq.n	80010fe <HAL_RCC_OscConfig+0x152>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d001      	beq.n	80010fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e1c7      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fe:	4b3b      	ldr	r3, [pc, #236]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	4937      	ldr	r1, [pc, #220]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 800110e:	4313      	orrs	r3, r2
 8001110:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001112:	e03a      	b.n	800118a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d020      	beq.n	800115e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800111c:	4b34      	ldr	r3, [pc, #208]	@ (80011f0 <HAL_RCC_OscConfig+0x244>)
 800111e:	2201      	movs	r2, #1
 8001120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001122:	f7ff fc6d 	bl	8000a00 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800112a:	f7ff fc69 	bl	8000a00 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e1a8      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113c:	4b2b      	ldr	r3, [pc, #172]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001148:	4b28      	ldr	r3, [pc, #160]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	4925      	ldr	r1, [pc, #148]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 8001158:	4313      	orrs	r3, r2
 800115a:	600b      	str	r3, [r1, #0]
 800115c:	e015      	b.n	800118a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800115e:	4b24      	ldr	r3, [pc, #144]	@ (80011f0 <HAL_RCC_OscConfig+0x244>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001164:	f7ff fc4c 	bl	8000a00 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800116c:	f7ff fc48 	bl	8000a00 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e187      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800117e:	4b1b      	ldr	r3, [pc, #108]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	2b00      	cmp	r3, #0
 8001194:	d036      	beq.n	8001204 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d016      	beq.n	80011cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800119e:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <HAL_RCC_OscConfig+0x248>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a4:	f7ff fc2c 	bl	8000a00 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ac:	f7ff fc28 	bl	8000a00 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e167      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011be:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <HAL_RCC_OscConfig+0x240>)
 80011c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f0      	beq.n	80011ac <HAL_RCC_OscConfig+0x200>
 80011ca:	e01b      	b.n	8001204 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011cc:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <HAL_RCC_OscConfig+0x248>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d2:	f7ff fc15 	bl	8000a00 <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d8:	e00e      	b.n	80011f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011da:	f7ff fc11 	bl	8000a00 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d907      	bls.n	80011f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e150      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
 80011ec:	40023800 	.word	0x40023800
 80011f0:	42470000 	.word	0x42470000
 80011f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f8:	4b88      	ldr	r3, [pc, #544]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 80011fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1ea      	bne.n	80011da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 8097 	beq.w	8001340 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001216:	4b81      	ldr	r3, [pc, #516]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10f      	bne.n	8001242 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	4b7d      	ldr	r3, [pc, #500]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	4a7c      	ldr	r2, [pc, #496]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001230:	6413      	str	r3, [r2, #64]	@ 0x40
 8001232:	4b7a      	ldr	r3, [pc, #488]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800123e:	2301      	movs	r3, #1
 8001240:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001242:	4b77      	ldr	r3, [pc, #476]	@ (8001420 <HAL_RCC_OscConfig+0x474>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800124a:	2b00      	cmp	r3, #0
 800124c:	d118      	bne.n	8001280 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800124e:	4b74      	ldr	r3, [pc, #464]	@ (8001420 <HAL_RCC_OscConfig+0x474>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a73      	ldr	r2, [pc, #460]	@ (8001420 <HAL_RCC_OscConfig+0x474>)
 8001254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800125a:	f7ff fbd1 	bl	8000a00 <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001262:	f7ff fbcd 	bl	8000a00 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e10c      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001274:	4b6a      	ldr	r3, [pc, #424]	@ (8001420 <HAL_RCC_OscConfig+0x474>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0f0      	beq.n	8001262 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d106      	bne.n	8001296 <HAL_RCC_OscConfig+0x2ea>
 8001288:	4b64      	ldr	r3, [pc, #400]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 800128a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800128c:	4a63      	ldr	r2, [pc, #396]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6713      	str	r3, [r2, #112]	@ 0x70
 8001294:	e01c      	b.n	80012d0 <HAL_RCC_OscConfig+0x324>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	2b05      	cmp	r3, #5
 800129c:	d10c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x30c>
 800129e:	4b5f      	ldr	r3, [pc, #380]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 80012a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012a2:	4a5e      	ldr	r2, [pc, #376]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80012aa:	4b5c      	ldr	r3, [pc, #368]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 80012ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012ae:	4a5b      	ldr	r2, [pc, #364]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80012b6:	e00b      	b.n	80012d0 <HAL_RCC_OscConfig+0x324>
 80012b8:	4b58      	ldr	r3, [pc, #352]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 80012ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012bc:	4a57      	ldr	r2, [pc, #348]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 80012be:	f023 0301 	bic.w	r3, r3, #1
 80012c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80012c4:	4b55      	ldr	r3, [pc, #340]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 80012c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012c8:	4a54      	ldr	r2, [pc, #336]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 80012ca:	f023 0304 	bic.w	r3, r3, #4
 80012ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d015      	beq.n	8001304 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d8:	f7ff fb92 	bl	8000a00 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012de:	e00a      	b.n	80012f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e0:	f7ff fb8e 	bl	8000a00 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e0cb      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f6:	4b49      	ldr	r3, [pc, #292]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 80012f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0ee      	beq.n	80012e0 <HAL_RCC_OscConfig+0x334>
 8001302:	e014      	b.n	800132e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001304:	f7ff fb7c 	bl	8000a00 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800130a:	e00a      	b.n	8001322 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130c:	f7ff fb78 	bl	8000a00 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800131a:	4293      	cmp	r3, r2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e0b5      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001322:	4b3e      	ldr	r3, [pc, #248]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 8001324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1ee      	bne.n	800130c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800132e:	7dfb      	ldrb	r3, [r7, #23]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d105      	bne.n	8001340 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001334:	4b39      	ldr	r3, [pc, #228]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001338:	4a38      	ldr	r2, [pc, #224]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 800133a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800133e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 80a1 	beq.w	800148c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800134a:	4b34      	ldr	r3, [pc, #208]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b08      	cmp	r3, #8
 8001354:	d05c      	beq.n	8001410 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	2b02      	cmp	r3, #2
 800135c:	d141      	bne.n	80013e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800135e:	4b31      	ldr	r3, [pc, #196]	@ (8001424 <HAL_RCC_OscConfig+0x478>)
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fb4c 	bl	8000a00 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136c:	f7ff fb48 	bl	8000a00 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e087      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800137e:	4b27      	ldr	r3, [pc, #156]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f0      	bne.n	800136c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69da      	ldr	r2, [r3, #28]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001398:	019b      	lsls	r3, r3, #6
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a0:	085b      	lsrs	r3, r3, #1
 80013a2:	3b01      	subs	r3, #1
 80013a4:	041b      	lsls	r3, r3, #16
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ac:	061b      	lsls	r3, r3, #24
 80013ae:	491b      	ldr	r1, [pc, #108]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001424 <HAL_RCC_OscConfig+0x478>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ba:	f7ff fb21 	bl	8000a00 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c2:	f7ff fb1d 	bl	8000a00 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e05c      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d4:	4b11      	ldr	r3, [pc, #68]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x416>
 80013e0:	e054      	b.n	800148c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e2:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <HAL_RCC_OscConfig+0x478>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fb0a 	bl	8000a00 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f0:	f7ff fb06 	bl	8000a00 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e045      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001402:	4b06      	ldr	r3, [pc, #24]	@ (800141c <HAL_RCC_OscConfig+0x470>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x444>
 800140e:	e03d      	b.n	800148c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d107      	bne.n	8001428 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e038      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
 800141c:	40023800 	.word	0x40023800
 8001420:	40007000 	.word	0x40007000
 8001424:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001428:	4b1b      	ldr	r3, [pc, #108]	@ (8001498 <HAL_RCC_OscConfig+0x4ec>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d028      	beq.n	8001488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001440:	429a      	cmp	r2, r3
 8001442:	d121      	bne.n	8001488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800144e:	429a      	cmp	r2, r3
 8001450:	d11a      	bne.n	8001488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001458:	4013      	ands	r3, r2
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800145e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001460:	4293      	cmp	r3, r2
 8001462:	d111      	bne.n	8001488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800146e:	085b      	lsrs	r3, r3, #1
 8001470:	3b01      	subs	r3, #1
 8001472:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001474:	429a      	cmp	r2, r3
 8001476:	d107      	bne.n	8001488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001482:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001484:	429a      	cmp	r2, r3
 8001486:	d001      	beq.n	800148c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e000      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800

0800149c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e0cc      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014b0:	4b68      	ldr	r3, [pc, #416]	@ (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d90c      	bls.n	80014d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014be:	4b65      	ldr	r3, [pc, #404]	@ (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c6:	4b63      	ldr	r3, [pc, #396]	@ (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d001      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e0b8      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d020      	beq.n	8001526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014f0:	4b59      	ldr	r3, [pc, #356]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	4a58      	ldr	r2, [pc, #352]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80014fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0308 	and.w	r3, r3, #8
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001508:	4b53      	ldr	r3, [pc, #332]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	4a52      	ldr	r2, [pc, #328]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001514:	4b50      	ldr	r3, [pc, #320]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	494d      	ldr	r1, [pc, #308]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	4313      	orrs	r3, r2
 8001524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d044      	beq.n	80015bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d107      	bne.n	800154a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153a:	4b47      	ldr	r3, [pc, #284]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d119      	bne.n	800157a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e07f      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d003      	beq.n	800155a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001556:	2b03      	cmp	r3, #3
 8001558:	d107      	bne.n	800156a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155a:	4b3f      	ldr	r3, [pc, #252]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d109      	bne.n	800157a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e06f      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156a:	4b3b      	ldr	r3, [pc, #236]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e067      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800157a:	4b37      	ldr	r3, [pc, #220]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f023 0203 	bic.w	r2, r3, #3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	4934      	ldr	r1, [pc, #208]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 8001588:	4313      	orrs	r3, r2
 800158a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800158c:	f7ff fa38 	bl	8000a00 <HAL_GetTick>
 8001590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001592:	e00a      	b.n	80015aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001594:	f7ff fa34 	bl	8000a00 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e04f      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 020c 	and.w	r2, r3, #12
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d1eb      	bne.n	8001594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015bc:	4b25      	ldr	r3, [pc, #148]	@ (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d20c      	bcs.n	80015e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ca:	4b22      	ldr	r3, [pc, #136]	@ (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d2:	4b20      	ldr	r3, [pc, #128]	@ (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e032      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d008      	beq.n	8001602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015f0:	4b19      	ldr	r3, [pc, #100]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	4916      	ldr	r1, [pc, #88]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	d009      	beq.n	8001622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800160e:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	490e      	ldr	r1, [pc, #56]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	4313      	orrs	r3, r2
 8001620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001622:	f000 f821 	bl	8001668 <HAL_RCC_GetSysClockFreq>
 8001626:	4602      	mov	r2, r0
 8001628:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	490a      	ldr	r1, [pc, #40]	@ (800165c <HAL_RCC_ClockConfig+0x1c0>)
 8001634:	5ccb      	ldrb	r3, [r1, r3]
 8001636:	fa22 f303 	lsr.w	r3, r2, r3
 800163a:	4a09      	ldr	r2, [pc, #36]	@ (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 800163c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <HAL_RCC_ClockConfig+0x1c8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff f8ac 	bl	80007a0 <HAL_InitTick>

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023c00 	.word	0x40023c00
 8001658:	40023800 	.word	0x40023800
 800165c:	08001ec0 	.word	0x08001ec0
 8001660:	2000000c 	.word	0x2000000c
 8001664:	20000010 	.word	0x20000010

08001668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800166c:	b094      	sub	sp, #80	@ 0x50
 800166e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001680:	4b79      	ldr	r3, [pc, #484]	@ (8001868 <HAL_RCC_GetSysClockFreq+0x200>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 030c 	and.w	r3, r3, #12
 8001688:	2b08      	cmp	r3, #8
 800168a:	d00d      	beq.n	80016a8 <HAL_RCC_GetSysClockFreq+0x40>
 800168c:	2b08      	cmp	r3, #8
 800168e:	f200 80e1 	bhi.w	8001854 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001692:	2b00      	cmp	r3, #0
 8001694:	d002      	beq.n	800169c <HAL_RCC_GetSysClockFreq+0x34>
 8001696:	2b04      	cmp	r3, #4
 8001698:	d003      	beq.n	80016a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800169a:	e0db      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800169c:	4b73      	ldr	r3, [pc, #460]	@ (800186c <HAL_RCC_GetSysClockFreq+0x204>)
 800169e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80016a0:	e0db      	b.n	800185a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016a2:	4b73      	ldr	r3, [pc, #460]	@ (8001870 <HAL_RCC_GetSysClockFreq+0x208>)
 80016a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80016a6:	e0d8      	b.n	800185a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016a8:	4b6f      	ldr	r3, [pc, #444]	@ (8001868 <HAL_RCC_GetSysClockFreq+0x200>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001868 <HAL_RCC_GetSysClockFreq+0x200>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d063      	beq.n	8001786 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016be:	4b6a      	ldr	r3, [pc, #424]	@ (8001868 <HAL_RCC_GetSysClockFreq+0x200>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	099b      	lsrs	r3, r3, #6
 80016c4:	2200      	movs	r2, #0
 80016c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80016ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80016d2:	2300      	movs	r3, #0
 80016d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80016d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80016da:	4622      	mov	r2, r4
 80016dc:	462b      	mov	r3, r5
 80016de:	f04f 0000 	mov.w	r0, #0
 80016e2:	f04f 0100 	mov.w	r1, #0
 80016e6:	0159      	lsls	r1, r3, #5
 80016e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016ec:	0150      	lsls	r0, r2, #5
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4621      	mov	r1, r4
 80016f4:	1a51      	subs	r1, r2, r1
 80016f6:	6139      	str	r1, [r7, #16]
 80016f8:	4629      	mov	r1, r5
 80016fa:	eb63 0301 	sbc.w	r3, r3, r1
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800170c:	4659      	mov	r1, fp
 800170e:	018b      	lsls	r3, r1, #6
 8001710:	4651      	mov	r1, sl
 8001712:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001716:	4651      	mov	r1, sl
 8001718:	018a      	lsls	r2, r1, #6
 800171a:	4651      	mov	r1, sl
 800171c:	ebb2 0801 	subs.w	r8, r2, r1
 8001720:	4659      	mov	r1, fp
 8001722:	eb63 0901 	sbc.w	r9, r3, r1
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800173a:	4690      	mov	r8, r2
 800173c:	4699      	mov	r9, r3
 800173e:	4623      	mov	r3, r4
 8001740:	eb18 0303 	adds.w	r3, r8, r3
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	462b      	mov	r3, r5
 8001748:	eb49 0303 	adc.w	r3, r9, r3
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	f04f 0300 	mov.w	r3, #0
 8001756:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800175a:	4629      	mov	r1, r5
 800175c:	024b      	lsls	r3, r1, #9
 800175e:	4621      	mov	r1, r4
 8001760:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001764:	4621      	mov	r1, r4
 8001766:	024a      	lsls	r2, r1, #9
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800176e:	2200      	movs	r2, #0
 8001770:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001772:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001774:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001778:	f7fe fd26 	bl	80001c8 <__aeabi_uldivmod>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4613      	mov	r3, r2
 8001782:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001784:	e058      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001786:	4b38      	ldr	r3, [pc, #224]	@ (8001868 <HAL_RCC_GetSysClockFreq+0x200>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	099b      	lsrs	r3, r3, #6
 800178c:	2200      	movs	r2, #0
 800178e:	4618      	mov	r0, r3
 8001790:	4611      	mov	r1, r2
 8001792:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001796:	623b      	str	r3, [r7, #32]
 8001798:	2300      	movs	r3, #0
 800179a:	627b      	str	r3, [r7, #36]	@ 0x24
 800179c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017a0:	4642      	mov	r2, r8
 80017a2:	464b      	mov	r3, r9
 80017a4:	f04f 0000 	mov.w	r0, #0
 80017a8:	f04f 0100 	mov.w	r1, #0
 80017ac:	0159      	lsls	r1, r3, #5
 80017ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017b2:	0150      	lsls	r0, r2, #5
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4641      	mov	r1, r8
 80017ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80017be:	4649      	mov	r1, r9
 80017c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80017d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80017d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017d8:	ebb2 040a 	subs.w	r4, r2, sl
 80017dc:	eb63 050b 	sbc.w	r5, r3, fp
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	00eb      	lsls	r3, r5, #3
 80017ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017ee:	00e2      	lsls	r2, r4, #3
 80017f0:	4614      	mov	r4, r2
 80017f2:	461d      	mov	r5, r3
 80017f4:	4643      	mov	r3, r8
 80017f6:	18e3      	adds	r3, r4, r3
 80017f8:	603b      	str	r3, [r7, #0]
 80017fa:	464b      	mov	r3, r9
 80017fc:	eb45 0303 	adc.w	r3, r5, r3
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800180e:	4629      	mov	r1, r5
 8001810:	028b      	lsls	r3, r1, #10
 8001812:	4621      	mov	r1, r4
 8001814:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001818:	4621      	mov	r1, r4
 800181a:	028a      	lsls	r2, r1, #10
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001822:	2200      	movs	r2, #0
 8001824:	61bb      	str	r3, [r7, #24]
 8001826:	61fa      	str	r2, [r7, #28]
 8001828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800182c:	f7fe fccc 	bl	80001c8 <__aeabi_uldivmod>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4613      	mov	r3, r2
 8001836:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001838:	4b0b      	ldr	r3, [pc, #44]	@ (8001868 <HAL_RCC_GetSysClockFreq+0x200>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	0c1b      	lsrs	r3, r3, #16
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	3301      	adds	r3, #1
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001848:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800184a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800184c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001850:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001852:	e002      	b.n	800185a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001854:	4b05      	ldr	r3, [pc, #20]	@ (800186c <HAL_RCC_GetSysClockFreq+0x204>)
 8001856:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800185a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800185c:	4618      	mov	r0, r3
 800185e:	3750      	adds	r7, #80	@ 0x50
 8001860:	46bd      	mov	sp, r7
 8001862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800
 800186c:	00f42400 	.word	0x00f42400
 8001870:	007a1200 	.word	0x007a1200

08001874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001878:	4b03      	ldr	r3, [pc, #12]	@ (8001888 <HAL_RCC_GetHCLKFreq+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	2000000c 	.word	0x2000000c

0800188c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001890:	f7ff fff0 	bl	8001874 <HAL_RCC_GetHCLKFreq>
 8001894:	4602      	mov	r2, r0
 8001896:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	0a9b      	lsrs	r3, r3, #10
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	4903      	ldr	r1, [pc, #12]	@ (80018b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018a2:	5ccb      	ldrb	r3, [r1, r3]
 80018a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	08001ed0 	.word	0x08001ed0

080018b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	220f      	movs	r2, #15
 80018c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018c4:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <HAL_RCC_GetClockConfig+0x5c>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 0203 	and.w	r2, r3, #3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <HAL_RCC_GetClockConfig+0x5c>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <HAL_RCC_GetClockConfig+0x5c>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018e8:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <HAL_RCC_GetClockConfig+0x5c>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	08db      	lsrs	r3, r3, #3
 80018ee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018f6:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <HAL_RCC_GetClockConfig+0x60>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0207 	and.w	r2, r3, #7
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	601a      	str	r2, [r3, #0]
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	40023c00 	.word	0x40023c00

08001918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e041      	b.n	80019ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d106      	bne.n	8001944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f839 	bl	80019b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3304      	adds	r3, #4
 8001954:	4619      	mov	r1, r3
 8001956:	4610      	mov	r0, r2
 8001958:	f000 f9c0 	bl	8001cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d001      	beq.n	80019e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e04e      	b.n	8001a82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a23      	ldr	r2, [pc, #140]	@ (8001a90 <HAL_TIM_Base_Start_IT+0xc4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d022      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x80>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a0e:	d01d      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x80>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a1f      	ldr	r2, [pc, #124]	@ (8001a94 <HAL_TIM_Base_Start_IT+0xc8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d018      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x80>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001a98 <HAL_TIM_Base_Start_IT+0xcc>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d013      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x80>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a1c      	ldr	r2, [pc, #112]	@ (8001a9c <HAL_TIM_Base_Start_IT+0xd0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d00e      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x80>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d009      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x80>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a19      	ldr	r2, [pc, #100]	@ (8001aa4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d004      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x80>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a18      	ldr	r2, [pc, #96]	@ (8001aa8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d111      	bne.n	8001a70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d010      	beq.n	8001a80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f042 0201 	orr.w	r2, r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a6e:	e007      	b.n	8001a80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0201 	orr.w	r2, r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40010000 	.word	0x40010000
 8001a94:	40000400 	.word	0x40000400
 8001a98:	40000800 	.word	0x40000800
 8001a9c:	40000c00 	.word	0x40000c00
 8001aa0:	40010400 	.word	0x40010400
 8001aa4:	40014000 	.word	0x40014000
 8001aa8:	40001800 	.word	0x40001800

08001aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d020      	beq.n	8001b10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d01b      	beq.n	8001b10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f06f 0202 	mvn.w	r2, #2
 8001ae0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f8d2 	bl	8001ca0 <HAL_TIM_IC_CaptureCallback>
 8001afc:	e005      	b.n	8001b0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f8c4 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f8d5 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d020      	beq.n	8001b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d01b      	beq.n	8001b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f06f 0204 	mvn.w	r2, #4
 8001b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2202      	movs	r2, #2
 8001b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f8ac 	bl	8001ca0 <HAL_TIM_IC_CaptureCallback>
 8001b48:	e005      	b.n	8001b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f89e 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f8af 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d020      	beq.n	8001ba8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d01b      	beq.n	8001ba8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f06f 0208 	mvn.w	r2, #8
 8001b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f886 	bl	8001ca0 <HAL_TIM_IC_CaptureCallback>
 8001b94:	e005      	b.n	8001ba2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f878 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f889 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f003 0310 	and.w	r3, r3, #16
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d020      	beq.n	8001bf4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d01b      	beq.n	8001bf4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f06f 0210 	mvn.w	r2, #16
 8001bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2208      	movs	r2, #8
 8001bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f860 	bl	8001ca0 <HAL_TIM_IC_CaptureCallback>
 8001be0:	e005      	b.n	8001bee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f852 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f863 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00c      	beq.n	8001c18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d007      	beq.n	8001c18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f06f 0201 	mvn.w	r2, #1
 8001c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7fe fd84 	bl	8000720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00c      	beq.n	8001c3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d007      	beq.n	8001c3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f900 	bl	8001e3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00c      	beq.n	8001c60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d007      	beq.n	8001c60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f834 	bl	8001cc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f003 0320 	and.w	r3, r3, #32
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00c      	beq.n	8001c84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f003 0320 	and.w	r3, r3, #32
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d007      	beq.n	8001c84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0220 	mvn.w	r2, #32
 8001c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8d2 	bl	8001e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a43      	ldr	r2, [pc, #268]	@ (8001dfc <TIM_Base_SetConfig+0x120>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d013      	beq.n	8001d1c <TIM_Base_SetConfig+0x40>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cfa:	d00f      	beq.n	8001d1c <TIM_Base_SetConfig+0x40>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a40      	ldr	r2, [pc, #256]	@ (8001e00 <TIM_Base_SetConfig+0x124>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d00b      	beq.n	8001d1c <TIM_Base_SetConfig+0x40>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a3f      	ldr	r2, [pc, #252]	@ (8001e04 <TIM_Base_SetConfig+0x128>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d007      	beq.n	8001d1c <TIM_Base_SetConfig+0x40>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a3e      	ldr	r2, [pc, #248]	@ (8001e08 <TIM_Base_SetConfig+0x12c>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d003      	beq.n	8001d1c <TIM_Base_SetConfig+0x40>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a3d      	ldr	r2, [pc, #244]	@ (8001e0c <TIM_Base_SetConfig+0x130>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d108      	bne.n	8001d2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a32      	ldr	r2, [pc, #200]	@ (8001dfc <TIM_Base_SetConfig+0x120>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d02b      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d3c:	d027      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a2f      	ldr	r2, [pc, #188]	@ (8001e00 <TIM_Base_SetConfig+0x124>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d023      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a2e      	ldr	r2, [pc, #184]	@ (8001e04 <TIM_Base_SetConfig+0x128>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d01f      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a2d      	ldr	r2, [pc, #180]	@ (8001e08 <TIM_Base_SetConfig+0x12c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d01b      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a2c      	ldr	r2, [pc, #176]	@ (8001e0c <TIM_Base_SetConfig+0x130>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d017      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a2b      	ldr	r2, [pc, #172]	@ (8001e10 <TIM_Base_SetConfig+0x134>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d013      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a2a      	ldr	r2, [pc, #168]	@ (8001e14 <TIM_Base_SetConfig+0x138>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00f      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a29      	ldr	r2, [pc, #164]	@ (8001e18 <TIM_Base_SetConfig+0x13c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00b      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a28      	ldr	r2, [pc, #160]	@ (8001e1c <TIM_Base_SetConfig+0x140>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d007      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a27      	ldr	r2, [pc, #156]	@ (8001e20 <TIM_Base_SetConfig+0x144>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d003      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a26      	ldr	r2, [pc, #152]	@ (8001e24 <TIM_Base_SetConfig+0x148>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d108      	bne.n	8001da0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a0e      	ldr	r2, [pc, #56]	@ (8001dfc <TIM_Base_SetConfig+0x120>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d003      	beq.n	8001dce <TIM_Base_SetConfig+0xf2>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a10      	ldr	r2, [pc, #64]	@ (8001e0c <TIM_Base_SetConfig+0x130>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d103      	bne.n	8001dd6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	691a      	ldr	r2, [r3, #16]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f043 0204 	orr.w	r2, r3, #4
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	601a      	str	r2, [r3, #0]
}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40010000 	.word	0x40010000
 8001e00:	40000400 	.word	0x40000400
 8001e04:	40000800 	.word	0x40000800
 8001e08:	40000c00 	.word	0x40000c00
 8001e0c:	40010400 	.word	0x40010400
 8001e10:	40014000 	.word	0x40014000
 8001e14:	40014400 	.word	0x40014400
 8001e18:	40014800 	.word	0x40014800
 8001e1c:	40001800 	.word	0x40001800
 8001e20:	40001c00 	.word	0x40001c00
 8001e24:	40002000 	.word	0x40002000

08001e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <memset>:
 8001e50:	4402      	add	r2, r0
 8001e52:	4603      	mov	r3, r0
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d100      	bne.n	8001e5a <memset+0xa>
 8001e58:	4770      	bx	lr
 8001e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e5e:	e7f9      	b.n	8001e54 <memset+0x4>

08001e60 <__libc_init_array>:
 8001e60:	b570      	push	{r4, r5, r6, lr}
 8001e62:	4d0d      	ldr	r5, [pc, #52]	@ (8001e98 <__libc_init_array+0x38>)
 8001e64:	4c0d      	ldr	r4, [pc, #52]	@ (8001e9c <__libc_init_array+0x3c>)
 8001e66:	1b64      	subs	r4, r4, r5
 8001e68:	10a4      	asrs	r4, r4, #2
 8001e6a:	2600      	movs	r6, #0
 8001e6c:	42a6      	cmp	r6, r4
 8001e6e:	d109      	bne.n	8001e84 <__libc_init_array+0x24>
 8001e70:	4d0b      	ldr	r5, [pc, #44]	@ (8001ea0 <__libc_init_array+0x40>)
 8001e72:	4c0c      	ldr	r4, [pc, #48]	@ (8001ea4 <__libc_init_array+0x44>)
 8001e74:	f000 f818 	bl	8001ea8 <_init>
 8001e78:	1b64      	subs	r4, r4, r5
 8001e7a:	10a4      	asrs	r4, r4, #2
 8001e7c:	2600      	movs	r6, #0
 8001e7e:	42a6      	cmp	r6, r4
 8001e80:	d105      	bne.n	8001e8e <__libc_init_array+0x2e>
 8001e82:	bd70      	pop	{r4, r5, r6, pc}
 8001e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e88:	4798      	blx	r3
 8001e8a:	3601      	adds	r6, #1
 8001e8c:	e7ee      	b.n	8001e6c <__libc_init_array+0xc>
 8001e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e92:	4798      	blx	r3
 8001e94:	3601      	adds	r6, #1
 8001e96:	e7f2      	b.n	8001e7e <__libc_init_array+0x1e>
 8001e98:	08001ee0 	.word	0x08001ee0
 8001e9c:	08001ee0 	.word	0x08001ee0
 8001ea0:	08001ee0 	.word	0x08001ee0
 8001ea4:	08001ee4 	.word	0x08001ee4

08001ea8 <_init>:
 8001ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eaa:	bf00      	nop
 8001eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eae:	bc08      	pop	{r3}
 8001eb0:	469e      	mov	lr, r3
 8001eb2:	4770      	bx	lr

08001eb4 <_fini>:
 8001eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb6:	bf00      	nop
 8001eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eba:	bc08      	pop	{r3}
 8001ebc:	469e      	mov	lr, r3
 8001ebe:	4770      	bx	lr
